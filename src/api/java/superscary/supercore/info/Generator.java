package superscary.supercore.info;

import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import superscary.supercore.logging.Logger;
import superscary.supercore.tools.TempArrayList;

import java.lang.reflect.Field;

/**
 * Copyright (c) 2017 SuperScary(ERBF) http://codesynced.com
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
public class Generator
{

	/**
	 * This class creates a mcmod.info file for you. No physical file is created however. It does this by setting the
	 * metadata of the mod by itself on startup.
	 */
	public static class Info
	{
		/**
		 * Holds the list of applicable fields that can be set
		 */
		private static final TempArrayList<String> unifiedList = new TempArrayList<>();

		/**
		 * Holds all set methods
		 */
		private static final TempArrayList<String> setMethods = new TempArrayList<>();

		private static String unsetMethods;

		/**
		 * Used to reference the metadata of the mod
		 */
		private static ModMetadata modMetadata;

		/**
		 *
		 */
		public static void printErrorLog()
		{
			Logger.info(Logger.MOD_MARKER, unsetMethods);
		}

		/**
		 * Creates the mod info file.
		 *
		 * @param par1Class The class that contains the CASE SENSITIVE fields to be set
		 * @param par2Event The {@link FMLPreInitializationEvent} event
		 * @return
		 */
		public static boolean create(Class par1Class, FMLPreInitializationEvent par2Event)
		{
			return create(par1Class, par2Event.getModMetadata());
		}

		/**
		 * Creates the mod info file.
		 *
		 * @param par1Class The class that contains the CASE SENSITIVE fields to be set
		 * @param metadata  the metadata (this method must be called on startup else you may run into issues)
		 * @return
		 */
		public static boolean create(Class par1Class, ModMetadata metadata)
		{
			createList();
			Field[] fields = par1Class.getDeclaredFields();
			int failedAllocations = 0;

			metadata.autogenerated = false;

			modMetadata = metadata;

			for (Field field : fields)
			{
				if (!set(field))
				{
					failedAllocations++;
					setMethods.add(field.getName());
				}
			}

			final boolean bool = printNonSetMethods(failedAllocations);
			unifiedList.setComplete();
			setMethods.setComplete();

			return bool;
		}

		/**
		 * Returns true if all methods have been set, false if not
		 * @param par1Int
		 * @return
		 */
		private static boolean printNonSetMethods(int par1Int)
		{
			if (setMethods.size() > 0 && setMethods.size() != unifiedList.size() && par1Int != 0)
			{
				StringBuilder builder = new StringBuilder();
				for (String string : setMethods)
				{
					builder.append(string + ", ");
				}

				builder.replace(builder.toString().length() - 2, builder.toString().length(), "");
				builder.append(" method(s) have not been set in the mcmod.info file! Is this a mistake?");
				unsetMethods = builder.toString();
			}

			return par1Int == 0;
		}

		/**
		 * Sets the field for a specific "module". Generally, you should not worry about this method.
		 *
		 * @param par1Field the field object generated
		 * @return
		 */
		private static boolean set(Field par1Field)
		{
			for (String string : unifiedList)
			{
				if (string.equalsIgnoreCase(par1Field.getName()))
				{
					try
					{
						Class targetType = par1Field.getType();
						Object value = targetType.newInstance();
						String targetValue = (String) par1Field.get(value);
						set(targetValue, unifiedList.indexOf(par1Field.getName()));
					} catch (Exception e)
					{
						e.printStackTrace();
					}
				}
			}
			return true;
		}

		/**
		 * Identifies where and what the parameter will be set to
		 *
		 * @param par1Str the value of the parameter
		 * @param par2Int identification number
		 * @return
		 */
		protected static boolean set(String par1Str, int par2Int)
		{
			switch (par2Int)
			{
				case 0:
					modMetadata.name = par1Str;
					return true;
				case 1:
					modMetadata.version = par1Str;
					return true;
				case 2:
					modMetadata.modId = par1Str;
					return true;
				case 3:
					modMetadata.description = par1Str;
					return true;
				case 4:
					modMetadata.authorList.add(par1Str);
					return true;
				case 5:
					modMetadata.url = par1Str;
					return true;
				case 6:
					modMetadata.updateJSON = par1Str;
					return true;
				case 7:
					modMetadata.credits = par1Str;
					return true;
				case 8:
					modMetadata.logoFile = par1Str;
					return true;
				case 9:
					modMetadata.screenshots = par1Str.split(", ");
					return true;
				default:
					return false;
			}
		}

		/**
		 * Creates the list of values in unifiedList if it does not already exist.
		 */
		protected static void createList()
		{
			unifiedList.add("NAME");
			unifiedList.add("VERSION");
			unifiedList.add("MODID");
			unifiedList.add("DESCRIPTION");
			unifiedList.add("AUTHOR");
			unifiedList.add("URL");
			unifiedList.add("UPDATE_JSON");
			unifiedList.add("CREDITS");
			unifiedList.add("LOGO");
			unifiedList.add("SCREENSHOTS");
		}
	}

}
